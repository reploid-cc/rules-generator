---
description: 
globs: 
alwaysApply: false
---
<!-- CONTENT_TARGET: AI_FACING - Mathematical notation User_Rules framework -->
# TDD.spec_engine & Test Framework (131)

## 🧪 TDD.spec_engine: Intelligent Test Generation

### Test Case Inference
```
TDD.spec_engine = (
    infer test cases from τ
    ⨁ include edge + validation + regression
    ⨁ cross-check against known issues and Λ
)
```

### TDD.loop: Red-Green-Refactor Cycle
```
TDD.loop = (
    spec → run → fail → fix → re-run
    ⨁ if pass: Ψ.capture_result, M.sync, Λ.extract
)
```

### Auto-Spec Generation
```
TDD.spec_path = ".cursor/tasks/sprint_{n}/spec_step_{x}.md"
TDD.auto_spec_trigger = (
    generate spec_step_x.md if τ.complexity > medium
    ⨁ or if user explicitly requests "TDD"
)
```

## 🧪 T.complexity_assessment: Task Complexity Evaluation

### Complexity Criteria
```
T.complexity = {
    simple: (
        single_file_change ⨁ minimal_logic ⨁ no_dependencies
        ⨁ estimated_effort < 1h ⨁ no_architecture_impact
    ),
    medium: (
        multi_file_changes ⨁ moderate_logic ⨁ few_dependencies
        ⨁ estimated_effort 1-4h ⨁ component_level_impact
    ),
    complex: (
        architecture_changes ⨁ extensive_logic ⨁ many_dependencies
        ⨁ estimated_effort > 4h ⨁ system_level_impact
    )
}
```

### TDD Trigger Logic
```
TDD.trigger_conditions = (
    if τ.complexity >= medium
    ⨁ or τ.dependencies_count > 2
    ⨁ or τ.integration_points > 1
    ⨁ or user_requests_TDD
    → generate TDD.spec_path
)
```

## 🧪 Testing Standards

### Test Types Required
- **Unit**: Individual function/component testing
- **Integration**: Component interaction testing  
- **Edge cases**: Boundary condition testing
- **Regression**: Prevent reintroduction of bugs

### Test Structure: AAA Pattern
```typescript
// Arrange: Set up test data and environment
const input = createTestData();
const expectedOutput = defineExpected();

// Act: Execute the function under test
const result = functionUnderTest(input);

// Assert: Verify the outcome
expect(result).toEqual(expectedOutput);
```

### Test Quality Requirements
- **Fast**: Tests complete <1s each
- **Independent**: No test dependencies
- **Descriptive**: Clear test names explain intent
- **Reliable**: Consistent results across runs

## 🧪 TDD Integration with Task System

### T.spec Integration
```
T.spec_generation = (
    auto-generate spec if complexity > medium
    ⨁ link spec to T.sprint tracking
    ⨁ update T.progress when tests pass
)
```

### Quality Gates
- All tests must pass before step completion
- Test coverage requirements per Λ.rules
- Performance benchmarks for complex operations
- Documentation updated with test results

## 🧪 Error Handling & Test Debugging

### Test Failure Protocol
1. **Analyze failure**: Determine root cause
2. **Fix implementation**: Address the core issue
3. **Re-run tests**: Verify fix works
4. **Document pattern**: Log in Ξ.error_memory if recurring

### Test Template
```javascript
describe('ComponentName', () => {
  test('should handle valid input correctly', () => {
    // Arrange
    const input = validTestData;
    
    // Act
    const result = functionUnderTest(input);
    
    // Assert
    expect(result).toEqual(expectedOutput);
  });
  
  test('should handle edge cases gracefully', () => {
    // Test boundary conditions
    const edgeInput = createEdgeCase();
    const result = functionUnderTest(edgeInput);
    expect(result).toBeDefined();
  });
  
  test('should throw errors for invalid input', () => {
    // Test error conditions
    expect(() => {
      functionUnderTest(invalidInput);
    }).toThrow('Expected error message');
  });
});
```

## 🧪 Performance & Quality Metrics

### Test Performance
- **Execution Speed**: Monitor test runtime
- **Coverage Metrics**: Track code coverage percentage
- **Flakiness Detection**: Identify unstable tests
- **Resource Usage**: Memory and CPU monitoring

### Quality Scoring
```
Test.quality_score = (
    coverage_percentage * 0.4
    ⨁ reliability_score * 0.3  
    ⨁ performance_score * 0.2
    ⨁ maintainability_score * 0.1
)
```

---
*TDD.spec_engine: Intelligent test generation with complexity-based triggers*




