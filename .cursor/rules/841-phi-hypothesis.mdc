---
description: 
globs: 
alwaysApply: false
---
---
description:
globs:
alwaysApply: true
---
# Φ* Hypothesis Abstraction Engine (841)

## 🎯 Φ*: Hypothesis Abstraction Engine

### Exploratory Abstraction
```
Φ* = hypothesis abstraction engine
Φ_H = (
    exploratory abstraction
    ⨁ capture emergent patterns
    ⨁ differentiate from Λ/templates
)
```

### Φ.snapshot: Design Pattern Capture
```
Φ.snapshot = (
    stored design motifs, structures, naming conventions
)
```

## 🎯 Φ Pattern Recognition & Abstraction

### Pattern Discovery Process
1. **Observation**: Monitor code patterns across implementations
2. **Pattern Extraction**: Identify recurring design decisions
3. **Abstraction**: Generalize patterns for reuse
4. **Validation**: Test pattern effectiveness across contexts
5. **Differentiation**: Distinguish from existing Λ rules

### Pattern Types Captured
- **Design Motifs**: Recurring architectural decisions
- **Naming Conventions**: Consistent naming patterns
- **Code Structures**: Effective organization patterns
- **Integration Patterns**: Inter-component communication
- **Error Handling**: Consistent error management approaches

## 🎯 Φ.match_snapshot: Pattern Matching

### Snapshot Matching Process
```
Φ.match_snapshot = (
    compare current context with stored patterns
    ⨁ suggest applicable design motifs
    ⨁ identify pattern deviation risks
    ⨁ recommend consistency improvements
)
```

### Pattern Application Guidelines
- **Context Relevance**: Ensure pattern fits current situation
- **Consistency Check**: Align with existing project patterns
- **Benefit Analysis**: Verify pattern adds value
- **Simplicity Guard**: Avoid over-abstraction

## 🎯 Φ Integration with Learning Systems

### Φ vs Λ Differentiation
```
Φ.scope = (
    exploratory patterns and emergent designs
    ⨁ hypothesis-driven abstractions
    ⨁ experimental pattern validation
)

Λ.scope = (
    proven rules and established practices
    ⨁ validated coding standards
    ⨁ mandatory compliance patterns
)
```

### Cross-System Integration
- **T.hooks**: Pattern matching during task creation
- **Ψ.capture**: Hypothesis tracking in cognitive traces
- **M.memory**: Pattern storage for future reference
- **Ξ.diagnostics**: Pattern effectiveness monitoring

## 🎯 Φ.capture_if_patterned: Selective Capture

### Pattern Worthy Criteria
```
Φ.capture_if_patterned = (
    evaluate pattern significance
    ⨁ if recurring AND beneficial: capture
    ⨁ if experimental: track hypothesis
    ⨁ if proven: promote to Λ.rules
)
```

### Capture Decision Matrix
- **Frequency**: Appears >3 times across different contexts
- **Effectiveness**: Demonstrably improves outcomes
- **Generalizability**: Applicable beyond specific implementation
- **Maintainability**: Sustainable and easy to follow

## 🎯 Φ Quality Assurance

### Hypothesis Validation Framework
```
Φ.validation = (
    test hypothesis against real implementations
    ⨁ measure pattern effectiveness
    ⨁ identify pattern limitations
    ⨁ document pattern evolution
)
```

### Pattern Evolution Tracking
- **Pattern Origin**: When and why pattern emerged
- **Usage Context**: Where pattern has been applied
- **Effectiveness Metrics**: Quantifiable benefits observed
- **Evolution Path**: How pattern has changed over time
- **Promotion Criteria**: When pattern becomes Λ rule

### Pattern Quality Metrics
```
Φ.quality_score = (
    reusability_factor * 0.3
    ⨁ effectiveness_rating * 0.3
    ⨁ simplicity_score * 0.2
    ⨁ consistency_with_existing * 0.2
)
```

## 🎯 Φ Pattern Library Structure

### Snapshot Organization
```
Φ.pattern_library = {
    architectural: system_design_patterns,
    naming: consistent_naming_conventions,
    organizational: file_structure_patterns,
    integration: component_communication_patterns,
    error_handling: error_management_patterns,
    testing: test_organization_patterns
}
```

### Pattern Documentation Template
```markdown
## Pattern: [Name]
**Context**: When this pattern applies
**Problem**: What issue this pattern solves
**Solution**: How the pattern addresses the problem
**Implementation**: Concrete implementation guidance
**Benefits**: Measurable advantages
**Limitations**: Known constraints or trade-offs
**Examples**: Real usage instances
**Metrics**: Effectiveness measurements
```

---
*Φ* = hypothesis abstraction engine with pattern evolution tracking*

