---
description: 
globs: 
alwaysApply: true
---
---
description:
globs:
alwaysApply: true
---
# Œ® Mandatory Interaction & M Memory Protocols (101) - CRITICAL ZERO TOLERANCE

## üö® Œ®.dialog_enabled: UNIVERSAL INTERACTION PATTERN

### ABSOLUTE WORKFLOW: NO RESPONSE WITHOUT INTERACTIVE FEEDBACK

#### Œ®.capture: Cognitive Trace Requirements
```
Œ®.capture = {
    Œ©*: reasoning_trace, 
    Œ¶*: abstraction_path, 
    Œû*: error_flow,
    Œõ: rules_invoked, 
    output: validation_score
}
```

#### MANDATORY WORKFLOW FOR ALL SCENARIOS:

##### üìù **RESPONDING TO QUESTIONS:**
1. User h·ªèi c√¢u h·ªèi
2. T√¨m ki·∫øm/formulate c√¢u tr·∫£ l·ªùi  
3. Provide answer to user
4. **üî¥ MANDATORY: Call Œ®.dialog ƒë·ªÉ user ki·ªÉm tra answer**

##### üéØ **TASK COMPLETION:**
1. User y√™u c·∫ßu task
2. Th·ª±c hi·ªán task
3. Complete task
4. B√°o c√°o results
5. **üî¥ MANDATORY: Call Œ®.dialog ƒë·ªÉ user ki·ªÉm tra completion**

##### üí¨ **RECEIVING INFORMATION:**
1. User cung c·∫•p th√¥ng tin
2. Process/acknowledge th√¥ng tin
3. **üî¥ MANDATORY: Call Œ®.dialog n·∫øu c·∫ßn clarification**

##### ‚ö†Ô∏è **PROBLEMS/BLOCKING ISSUES:**
1. Encounter v·∫•n ƒë·ªÅ
2. Analyze v√† propose solutions
3. Present problem + solutions
4. **üî¥ MANDATORY: Call Œ®.dialog ƒë·ªÉ user ch·ªët ph∆∞∆°ng √°n**

### Œ®.function_call_template:
```typescript
mcp_interactive_feedback({
  project_directory: "D:\\VirtuCrewFlow\\Git-tool\\interactive-feedback-mcp", // Global MCP tool - fixed absolute path
  summary: "what_im_reporting_or_what_user_should_review"
})
```

### üî¥ CRITICAL RULE:
**EVERY SINGLE RESPONSE MUST END WITH Œ®.dialog CALL**

## üîß M.memory_path: Memory Bank Protocol

### M.retrieval: Dynamic Context Loading
```
M.memory_path = ".cursor/memory/"
M.retrieval = dynamic reference resolution + session_independent_context
M.sync = (
    triggered on review
    ‚®Å store ideas, constraints, insights, edge notes
    ‚®Å maintain session-independent context files when present
)
```

### M.sync_hooks: Mandatory Memory Operations
- **Task Start (MANDATORY)**: 
  - Read ALL relevant files in `.cursor/memory/` (if exists)
  - Load dynamic traces and cognitive context
  - Cross-validate context consistency
- **Task Complete**: 
  - Store insights, constraints, decisions
  - Update session-independent files if significant changes
  - Maintain memory artifacts for future sessions
- **Problem Detection**: 
  - Log patterns, solutions, context in `errors.md`
  - Update architectural insights if applicable

### M.memory_integration_note:
```
// Memory system supports both:
// 1. Dynamic traces (trace_*.md) - AI cognitive memory
// 2. Session-independent files - project context preservation
// See rule 111 for "init memory" command details
```

### üîß Environment Management
```
Environment.protocol = (
    never modify .env files without permission
    ‚®Å always read from official .env for execution
    ‚®Å pause workflow until environment properly updated
    ‚®Å document requirements in env.md when changes needed
)
```

## üî¥ VIOLATION = COMPLETE FAILURE:
- Any response without Œ®.dialog = Rule violation
- Missing M.retrieval at task start = Context failure
- Not reading memory files when present = Session continuity failure
- Environment modification without permission = Security violation
- Zero tolerance policy on all mandatory protocols

### HABIT BUILDING:
- **Before hitting send**: Ask "Did I call Œ®.dialog?"
- **At task start**: Ask "Did I check M.memory_path?"
- **If answer is NO**: Execute immediately
- **Make it AUTOMATIC**: Every response = Œ®.dialog call

---
*Œ®.dialog_enabled + M.memory_path = MANDATORY PROTOCOLS with session continuity support*









