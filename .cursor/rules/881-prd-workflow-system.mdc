---
description: 
globs: 
alwaysApply: false
---
<!-- CONTENT_TARGET: AI_FACING - Mathematical notation User_Rules framework -->
# PRD Workflow Integration with T System (881)

## 🎯 PRD.workflow: Product Development Task Integration

### PRD Command Detection
```
PRD.commands = {
    "init PRD": T.create_prd_workflow_from_scratch,
    "init PRD to RFC": T.execute_complete_prd_to_rfc_sequence,
    "init PRD step [1-6]": T.jump_to_specific_prd_step,
    "init PRD - [changes]": T.handle_prd_change_management
}
```

### T.prd_integration: PRD Tasks in Task System
```
T.prd_integration = (
    PRD workflow becomes structured T.sprint
    ⨁ each PRD step = T.task with validation gates
    ⨁ progress tracked via T.progress metadata
    ⨁ outputs managed in T.sprint_path/outputs/
)
```

## 🎯 PRD.step_mapping: Workflow Step Integration

### Step 1: Interactive PRD Creation
```
T.prd_step_1 = {
    task_name: "Interactive PRD Creation",
    complexity: "medium",
    inputs: user_requirements + business_context,
    process: guided_questioning_with_Ω.modes,
    outputs: "PRD.md",
    validation: completeness_check + stakeholder_review
}
```

### Step 2: PRD Comprehensive Verification  
```
T.prd_step_2 = {
    task_name: "PRD Verification & Enhancement",
    complexity: "medium", 
    inputs: "PRD.md",
    process: gap_analysis + quality_improvement,
    outputs: "prd-improved.md",
    validation: gap_coverage + quality_scoring
}
```

### Step 3: Features Extraction
```
T.prd_step_3 = {
    task_name: "Features Extraction & Prioritization",
    complexity: "medium",
    inputs: "prd-improved.md",
    process: feature_identification + MoSCoW_prioritization,
    outputs: "features.md", 
    validation: priority_consistency + completeness_check
}
```

### Step 4: Rules Generation
```
T.prd_step_4 = {
    task_name: "Technical Rules Generation",
    complexity: "medium",
    inputs: "PRD.md" + "features.md",
    process: technical_guideline_creation + Λ.pattern_alignment,
    outputs: "rules.md",
    validation: Λ.consistency_check + technical_feasibility
}
```

### Step 5: RFCs Generation
```
T.prd_step_5 = {
    task_name: "RFCs Generation & Implementation Planning",
    complexity: "complex",
    inputs: "PRD.md" + "features.md" + "rules.md",
    process: RFC_breakdown + implementation_prompt_generation,
    outputs: "RFCs/" + implementation_prompts,
    validation: dependency_analysis + implementation_feasibility
}
```

### Step 6: Change Management
```
T.prd_step_6 = {
    task_name: "PRD Change Management",
    complexity: "variable",
    inputs: existing_PRD_artifacts + change_requirements,
    process: impact_analysis + cascading_updates,
    outputs: updated_artifacts + change_audit_trail,
    validation: consistency_maintenance + stakeholder_approval
}
```

## 🎯 T.prd_workflow_orchestration: Automated Workflow Management

### Command Routing Logic
```
T.prd_command_router = (
    detect PRD command in user input
    ⨁ check T.sprint_path/progress/current-step.json
    ⨁ route to appropriate T.prd_step_[n]
    ⨁ update T.progress tracking
    ⨁ execute step with quality gates
)
```

### Progress Management
```
T.prd_progress = {
    current_step: active_step_number,
    last_completed_step: last_successful_step,
    workflow_status: [not_started|in_progress|step_complete|all_complete],
    step_outputs: validation_status_per_step,
    quality_gates: pass_fail_status_per_validation
}
```

## 🎯 T.prd_quality_gates: Validation Framework

### Step Completion Criteria
```
T.prd_validation_gates = (
    output_file_exists_and_well_formed
    ⨁ content_quality_meets_standards  
    ⨁ stakeholder_review_completed
    ⨁ dependency_prerequisites_satisfied
    ⨁ Λ.rules_compliance_verified
)
```

### Quality Scoring System
```
T.prd_quality_score = (
    completeness_percentage * 0.3
    ⨁ clarity_and_actionability * 0.3
    ⨁ stakeholder_satisfaction * 0.2  
    ⨁ technical_feasibility * 0.2
)
```

## 🎯 T.prd_integration_hooks: System Integration

### PRD Workflow Hooks
```
T.prd_hooks = {
    on_prd_step_start: [M.recall_context, Φ.match_snapshot],
    on_prd_step_complete: [T.update_progress, M.sync_outputs, Ψ.capture_decisions],
    on_prd_workflow_complete: [Λ.extract_patterns, Ψ.sprint_reflection],
    on_prd_change_request: [T.impact_analysis, Ξ.track_change_pattern]
}
```

### Cross-System Integration
- **Ψ.capture**: All PRD decisions and reasoning captured
- **M.sync**: PRD artifacts stored in memory bank
- **Λ.extract**: Successful patterns become reusable rules
- **Φ.snapshot**: Design decisions captured for pattern library
- **Ξ.track**: Issues and resolutions logged for learning

## 🎯 T.prd_file_structure: Organized Output Management

### PRD Task Sprint Structure
```
T.sprint_path/prd_workflow/
├── progress/
│   └── current-step.json        # T.progress tracking
├── outputs/  
│   ├── PRD.md                   # Step 1 output
│   ├── prd-improved.md          # Step 2 output  
│   ├── features.md              # Step 3 output
│   ├── rules.md                 # Step 4 output
│   └── RFCs/                    # Step 5 outputs
├── specs/
│   ├── spec_step_1.md           # TDD specs if complex
│   └── spec_step_2.md           # Generated as needed
└── review.md                    # T.sprint_review
```

### Change Management Integration
```
T.prd_change_management = (
    detect_change_scope_and_impact  
    ⨁ update_affected_T.tasks
    ⨁ regenerate_dependent_outputs
    ⨁ maintain_audit_trail_in_Ψ
    ⨁ validate_consistency_across_artifacts
)
```

---
*PRD workflow integrated into T system with quality gates and progress tracking*


