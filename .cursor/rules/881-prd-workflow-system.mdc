---
description: 
globs: 
alwaysApply: false
---
<!-- CONTENT_TARGET: AI_FACING - Mathematical notation User_Rules framework -->
# PRD Workflow Integration with T System (881)

## 🎯 PRD.workflow: Product Development Task Integration

### PRD Command Detection
```
PRD.commands = {
    "init PRD": T.create_prd_workflow_from_scratch,
    "init PRD to RFC": T.execute_complete_prd_to_rfc_sequence,
    "init PRD step [1-6]": T.jump_to_specific_prd_step,
    "init PRD - [changes]": T.handle_prd_change_management
}
```

### T.prd_integration: PRD Tasks in Task System
```
T.prd_integration = (PRD_workflow → T.sprint ⨁ each_step = T.task ⨁ progress_via_T.metadata ⨁ outputs_in_T.sprint_path)
```

## 🎯 PRD.step_mapping: Workflow Step Integration

### Step 1: Interactive PRD Creation
```
T.prd_step_1 = {task: "Interactive PRD Creation", complexity: medium, inputs: user_requirements + business_context, process: guided_questioning_Ω, outputs: "PRD.md", validation: completeness + stakeholder_review}
```

### Step 2: PRD Comprehensive Verification  
```
T.prd_step_2 = {task: "PRD Verification & Enhancement", complexity: medium, inputs: "PRD.md", process: gap_analysis + quality_improvement, outputs: "prd-improved.md", validation: gap_coverage + quality_scoring}
```

### Step 3: Features Extraction
```
T.prd_step_3 = {task: "Features Extraction & Prioritization", complexity: medium, inputs: "prd-improved.md", process: feature_identification + MoSCoW_prioritization, outputs: "features.md", validation: priority_consistency + completeness}
```

### Step 4: Rules Generation
```
T.prd_step_4 = {task: "Technical Rules Generation", complexity: medium, inputs: "PRD.md" + "features.md", process: guideline_creation + Λ.pattern_alignment, outputs: "rules.md", validation: Λ.consistency + technical_feasibility}
```

### Step 5: RFCs Generation
```
T.prd_step_5 = {task: "RFCs Generation & Implementation Planning", complexity: complex, inputs: "PRD.md" + "features.md" + "rules.md", process: RFC_breakdown + implementation_prompts, outputs: "RFCs/" + prompts, validation: dependency_analysis + feasibility}
```

### Step 6: Change Management
```
T.prd_step_6 = {task: "PRD Change Management", complexity: variable, inputs: existing_artifacts + changes, process: impact_analysis + cascading_updates, outputs: updated_artifacts + audit_trail, validation: consistency + stakeholder_approval}
```

## 🎯 T.prd_workflow_orchestration: Automated Workflow Management

### Command Routing Logic
```
T.prd_command_router = (detect_PRD_command ⨁ check_current_step ⨁ route_to_T.prd_step_[n] ⨁ update_T.progress ⨁ execute_with_quality_gates)
```

### Progress Management
```
T.prd_progress = {current_step: n, last_completed: n-1, status: [not_started|in_progress|step_complete|all_complete], outputs: validation_per_step, quality_gates: pass_fail_per_validation}
```

## 🎯 T.prd_quality_gates: Validation Framework

### Step Completion Criteria
```
T.prd_validation_gates = (output_exists_well_formed ⨁ quality_meets_standards ⨁ stakeholder_review_complete ⨁ dependencies_satisfied ⨁ Λ.rules_compliance)
```

### Quality Scoring System
```
T.prd_quality_score = (completeness * 0.3 ⨁ clarity_actionability * 0.3 ⨁ stakeholder_satisfaction * 0.2 ⨁ technical_feasibility * 0.2)
```

## 🎯 T.prd_integration_hooks: System Integration

### PRD Workflow Hooks
```
T.prd_hooks = {
    on_step_start: [M.recall_context, Φ.match_snapshot],
    on_step_complete: [T.update_progress, M.sync_outputs, Ψ.capture_decisions],
    on_workflow_complete: [Λ.extract_patterns, Ψ.sprint_reflection],
    on_change_request: [T.impact_analysis, Ξ.track_change_pattern]
}
```

### Cross-System Integration
```
PRD.integration = (Ψ.capture: decisions ⨁ M.sync: artifacts ⨁ Λ.extract: patterns ⨁ Φ.snapshot: design_decisions ⨁ Ξ.track: issues_resolutions)
```

## 🎯 T.prd_file_structure: Organized Output Management

### PRD Task Sprint Structure
```
T.sprint_path/prd_workflow/
├── progress/current-step.json    # T.progress tracking
├── outputs/{PRD.md, prd-improved.md, features.md, rules.md, RFCs/}
├── specs/{spec_step_n.md}        # TDD specs if complex
└── review.md                     # T.sprint_review
```

### Change Management Integration
```
T.prd_change_management = (detect_change_scope ⨁ update_affected_T.tasks ⨁ regenerate_dependent_outputs ⨁ maintain_audit_trail_Ψ ⨁ validate_consistency)
```

---
*PRD workflow integrated into T system → quality gates + progress tracking*


