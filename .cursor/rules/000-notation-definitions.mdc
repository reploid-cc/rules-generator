---
description: 
globs: 
alwaysApply: true
---
---
description:
globs:
alwaysApply: true
---
<!-- CONTENT_TARGET: AI_FACING - Mathematical notation User_Rules framework -->

# 𝕌 Universal Notation Definitions (000)

## 🎯 Core System Symbols

### Primary Systems
```
Ω* = max(∇ΣΩ) ⟶ intent_aligned_reasoning
Ψ = cognitive_trace_dialogue_system
M = file_based_memory_system  
T = structured_task_system
Λ = rule_based_self_learning
Φ* = hypothesis_abstraction_engine
Ξ* = diagnostics_refinement_engine
D⍺ = contradiction_resolver
```

### Mathematical Operators
```
⨁ = logical_AND_composition
→ = implies_triggers_leads_to
⇌ = bidirectional_relationship
⟶ = transformation_mapping
∇ = gradient_optimization
Σ = summation_integration
∈ = element_of_belongs_to
⊆ = subset_of_contained_in
∪ = union_combination
∩ = intersection_overlap
```

### Hierarchical Notation
```
Ω.modes = reasoning_framework_modes
Ω_H = hierarchical_problem_decomposition
Ωₜ = trust_validation_framework
Ψ.capture = cognitive_trace_requirements
Ψ.dialog = interactive_feedback_system
M.memory_path = file_based_memory_location
T.task_system = structured_task_management
Λ.rules = rule_learning_system
```

## 🎯 Functional Notation Patterns

### System Integration
```
Σ_hooks = {
    on_event: [system_responses],
    trigger_condition: [automated_actions]
}
```

### Conditional Logic
```
if condition → action
when trigger ⨁ context → response
unless constraint → alternative_action
```

### Composition Patterns
```
system = (
    component_1
    ⨁ component_2  
    ⨁ component_3
)
```

## 🎯 Status & State Notation

### Execution States
```
✅ = completed_successful
⏳ = in_progress_waiting
🔴 = critical_mandatory
🟡 = warning_attention_needed
🟢 = optional_nice_to_have
❌ = failed_incorrect
```

### Priority Levels
```
MANDATORY = zero_tolerance_required
CRITICAL = immediate_attention_required
HIGH = important_priority
MEDIUM = standard_priority
LOW = optional_when_time_permits
```

## 🎯 Cross-Reference Notation

### Rule References
```
rule_XXX = reference_to_rule_number_XXX
Λ.XXX = lambda_rule_XXX_reference
→ rule_XXX = see_rule_XXX_for_details
```

### System Cross-References
```
via_Ω = through_omega_reasoning_system
via_Ψ = through_psi_dialogue_system
via_M = through_memory_system
via_T = through_task_system
```

## 🎯 Workflow Notation

### Process Flow
```
step_1 → step_2 → step_3
parallel_process_A ⨁ parallel_process_B
conditional_branch: if_X → path_A, else → path_B
```

### Validation Patterns
```
validate(condition) → proceed | rollback
test(functionality) → pass ⨁ fail
verify(requirement) → satisfied | missing
```

## 🎯 Quality & Metrics

### Measurement Notation
```
baseline_metric = initial_measurement
target_metric = desired_outcome
current_metric = present_state
reduction_percentage = (baseline - current) / baseline * 100
```

### Threshold Notation
```
threshold_value ≥ minimum_acceptable
performance_metric ≤ maximum_allowed
quality_score ∈ [acceptable_range]
```

## 🎯 Error & Exception Handling

### Error States
```
error_detected → stop_immediately
critical_failure → execute_rollback
warning_condition → log_and_continue
```

### Recovery Patterns
```
rollback_to(safe_state)
restore_from(backup_point)
retry_with(modified_parameters)
```

---

*𝕌 = Universal_Notation_System for consistent mathematical representation across User Rules framework*


