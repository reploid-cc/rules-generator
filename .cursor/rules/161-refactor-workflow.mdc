---
description: 
globs: 
alwaysApply: false
---
<!-- CONTENT_TARGET: AI_FACING - Mathematical notation User_Rules framework -->

# Λ.161 "init refactor" Workflow (161)

## 🎯 Λ.161: Systematic Refactor Command

### Command Trigger
```
User Command: "init refactor"
Λ.161 = systematic_refactor_workflow_with_mandatory_approval
```

### Λ.161_workflow: 5-Phase Execution
```
Λ.161 = (scope_clarification() ⨁ strategic_planning() ⨁ file_creation() ⨁ controlled_execution() ⨁ cleanup_completion())
```

## 🎯 Phase 1: Scope Clarification

### Λ.161.scope_options: 8 Refactor Types
```
Λ.161.scope_options = {
    1: toàn_bộ_codebase_dự_án,
    2: thư_mục_cụ_thể,
    3: file_đơn_lẻ,
    4: component_module_cụ_thể,
    5: pattern_design_cụ_thể,
    6: architecture_system_level,
    7: technical_debt_cleanup,
    8: performance_optimization
}
```

### Λ.161.clarification_protocol:
```
Λ.161.clarification_protocol = (present_8_options ⨁ gather_constraints ⨁ assess_priority ⨁ 🔴 MANDATORY: user_confirmation_before_proceed)
```

## 🎯 Phase 2: Strategic Planning

### Λ.161.analysis_framework:
```
Λ.161.analysis = (current_state_assessment() ⨁ complexity_estimation() ⨁ risk_analysis() ⨁ resource_estimation() ⨁ phased_strategy())
```

### Λ.161.planning_output:
```
Λ.161.planning_output = {strategy: multi_phase, timeline: hours_breakdown, risks: potential_issues, safety: rollback_plans, validation: testing_strategy}
```

### 🔴 MANDATORY: User Approval Required
```
Λ.161.approval_gate_2 = user_must_approve_strategic_plan_before_execution
```

## 🎯 Phase 3: File Creation

### Λ.161.asset_generation:
```
Λ.161.refactor_path = ".cursor/tasks/refactor_{timestamp}/"
Λ.161.assets = {refactor_plan.md, checklist.md, rollback_guide.md, test_validation.md, progress_tracking.md}
```

### Λ.161.safety_protocols:
```
Λ.161.safety = (git_backup ⨁ incremental_commits ⨁ rollback_procedures ⨁ validation_checkpoints)
```

### 🔴 MANDATORY: User Approval Required
```
Λ.161.approval_gate_3 = user_must_approve_assets_before_execution
```

## 🎯 Phase 4: Controlled Execution

### Λ.161.execution_protocol:
```
Λ.161.execution = (execute_one_step ⨁ 🔴 MANDATORY: user_approval_each_step ⨁ validate_after_change ⨁ commit_progress ⨁ monitor_breaking_changes)
```

### Λ.161.step_validation:
```
Λ.161.validation = (functional_check ⨁ rule_compatibility ⨁ cross_reference_check ⨁ notation_consistency)
```

### Λ.161.breaking_change_detection:
```
Λ.161.breaking_detection = (if_breaking_detected → immediate_stop ⨁ rollback_safe_state ⨁ report_via_Ψ ⨁ require_user_decision)
```

## 🎯 Phase 5: Cleanup Completion

### Λ.161.completion_protocol:
```
Λ.161.completion = (final_validation ⨁ metrics_reporting ⨁ cleanup_temp_files ⨁ 🔴 MANDATORY: user_confirmation_cleanup)
```

### Λ.161.success_criteria:
```
Λ.161.success = (functionality_preserved ⨁ improvements_achieved ⨁ zero_breaking_changes ⨁ docs_updated ⨁ git_clean)
```

## 🎯 Integration với User Rules Framework

### Cross-System Integration
```
Λ.161.integration = (Ω.refactor_guard ⨁ Ξ.cleanup_phase ⨁ Λ.pattern_alignment ⨁ Φ.snapshot ⨁ Ψ.capture ⨁ M.sync)
```

### Safety Integration với Rule 142
```
Λ.161.git_safety = (follow_rule_142 ⨁ request_permission ⨁ descriptive_commits ⨁ incremental_commits)
```

## 🎯 Error Handling & Recovery

### Λ.161.error_protocol:
```
Λ.161.error_handling = (immediate_stop ⨁ rollback_safe_state ⨁ document_in_Ξ ⨁ require_user_decision)
```

### Emergency Rollback
```
Λ.161.emergency_rollback = (git_reset_backup ⨁ restore_files ⨁ validate_integrity ⨁ report_completion)
```

## 🎯 Quality Assurance

### Λ.161.quality_gates:
```
Λ.161.quality = (zero_breaking_changes ⨁ 100%_functional_preservation ⨁ notation_consistency ⨁ cross_reference_integrity ⨁ mandatory_user_approval)
```

### Success Metrics
```
Λ.161.metrics = {compression_ratio: target_vs_achieved, functionality: 100%_required, breaking_changes: zero_tolerance, user_satisfaction: approval_gates, efficiency: planned_vs_actual}
```

---
*Λ.161: Systematic refactor workflow với mandatory user approval → zero breaking changes*




