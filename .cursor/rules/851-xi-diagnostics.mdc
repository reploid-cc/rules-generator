---
description: 
globs: 
alwaysApply: true
---
---
description:
globs:
alwaysApply: true
---
<!-- CONTENT_TARGET: AI_FACING - Mathematical notation User_Rules framework -->
# Œû* Diagnostics & Refinement Engine (851)

## üéØ Œû*: Diagnostics & Refinement

### Error Memory System
```
Œû* = diagnostics & refinement
Œû.error_memory = ".cursor/memory/errors.md"
Œû.track = log recurring issues, propose fix
```

### Recurrence Detection
```
Œû.recurrence_threshold = 2
Œû.pattern_suggestion = (
    if recurring fixable issues detected
    ‚®Å auto-generate rule draft in Œõ.path
    ‚®Å suggest reusable strategy
)
```

## üéØ Œû.cleanup_phase: Code Quality Maintenance

### Drift Detection & Cleanup
```
Œû.cleanup_phase = (
    detect code drift: dead logic, broken imports, incoherence
    ‚®Å suggest refactor or simplification
    ‚®Å optionally archive removed blocks in Œ®
)
```

### Code Quality Issues Tracked
- **Dead Logic**: Unreachable or unused code
- **Broken Imports**: Missing or incorrect dependencies
- **Incoherence**: Inconsistent patterns or naming
- **Technical Debt**: Accumulated shortcuts or workarounds
- **Performance Issues**: Inefficient implementations

## üéØ Œû.track: Issue Tracking & Analysis

### Issue Classification System
```
Œû.issue_types = {
    recurring: same_problem_multiple_times,
    systematic: pattern_of_related_issues,
    environmental: setup_or_configuration_problems,
    architectural: fundamental_design_issues,
    procedural: process_or_workflow_problems
}
```

### Tracking Protocol
1. **Issue Detection**: Identify problem occurrence
2. **Context Capture**: Record surrounding circumstances
3. **Pattern Analysis**: Check for recurring patterns
4. **Root Cause**: Determine underlying cause
5. **Solution Tracking**: Document resolution approach
6. **Effectiveness**: Monitor solution success

## üéØ Œû Error Analysis & Resolution

### Error Memory Structure
```markdown
# errors.md

## Recurring Issues
### [Issue Category]
- **Problem**: Description of the issue
- **Occurrences**: Timestamps and contexts
- **Root Cause**: Underlying reason
- **Resolution**: Applied solution
- **Prevention**: How to avoid in future
- **Status**: [Active|Resolved|Monitoring]

## Pattern Analysis
### [Pattern Name]
- **Frequency**: How often it occurs
- **Impact**: Severity and scope
- **Proposed Solution**: Systematic fix
- **Rule Draft**: Link to generated Œõ rule
```

### Solution Generation Process
```
Œû.solution_generation = (
    analyze issue context and frequency
    ‚®Å identify root cause patterns
    ‚®Å propose systematic solutions
    ‚®Å generate preventive Œõ rules if appropriate
)
```

## üéØ Œû Integration with Learning Systems

### Automatic Rule Generation
```
Œû.auto_rule_generation = (
    if issue_frequency >= Œû.recurrence_threshold
    ‚®Å generate _DRAFT.mdc in Œõ.path
    ‚®Å include problem description + solution
    ‚®Å propose prevention strategy
)
```

### Cross-System Diagnostic Hooks
```
Œ£_hooks.diagnostics = {
    on_error_detected: [Œû.track, Œõ.suggest],
    on_recurrent_error_detected: [Œõ.generate_draft_rule],
    on_file_modified: [Œõ.suggest, Œ¶.capture_if_patterned],
    on_cleanup_triggered: [Œû.cleanup_phase, Œ®.capture_changes]
}
```

## üéØ Œû Quality Metrics & Monitoring

### Diagnostic Effectiveness Metrics
```
Œû.effectiveness = {
    issue_resolution_rate: resolved_issues / total_issues,
    prevention_success: prevented_recurrences / total_attempts,
    pattern_detection_accuracy: correct_patterns / total_patterns,
    cleanup_impact: quality_improvement_score
}
```

### Quality Improvement Tracking
- **Before/After Metrics**: Code quality scores pre/post cleanup
- **Issue Reduction**: Decrease in recurring problems
- **Prevention Effectiveness**: Success of preventive measures
- **Time to Resolution**: Speed of issue identification and fixing

## üéØ Œû.cleanup Automation

### Automated Cleanup Triggers
```
Œû.auto_cleanup = (
    trigger_on = [
        file_modification_count > threshold,
        error_frequency > acceptable_rate,
        technical_debt_accumulation > limit,
        manual_cleanup_request
    ]
)
```

### Cleanup Operations
1. **Dead Code Removal**: Identify and suggest removal of unused code
2. **Import Optimization**: Fix broken or redundant imports
3. **Pattern Consistency**: Align with established patterns
4. **Documentation Sync**: Update docs to match implementation
5. **Test Coverage**: Identify gaps in test coverage

### Safety Protocols
```
Œû.safety_protocol = (
    archive_removed_code_in_Œ®_traces
    ‚®Å require_confirmation_for_major_changes
    ‚®Å maintain_rollback_capability
    ‚®Å document_all_cleanup_decisions
)
```

## üéØ Œû Predictive Analysis

### Trend Analysis
```
Œû.trend_analysis = (
    identify_degradation_patterns
    ‚®Å predict_likely_future_issues
    ‚®Å suggest_preventive_measures
    ‚®Å recommend_proactive_refactoring
)
```

### Early Warning System
- **Code Complexity Growth**: Monitor increasing complexity
- **Error Rate Trends**: Track error frequency changes
- **Technical Debt Accumulation**: Measure debt growth rate
- **Pattern Violation Frequency**: Monitor rule compliance

---
*Œû* = diagnostics & refinement with predictive issue prevention*


