---
description: 
globs: 
alwaysApply: true
---
---
description:
globs:
alwaysApply: true
---
<!-- CONTENT_TARGET: AI_FACING - Mathematical notation User_Rules framework -->

# Ξ* Diagnostics & Refinement Engine (851)

## 🎯 Ξ*: Diagnostics & Refinement

### Error Memory System
```
Ξ* = diagnostics & refinement
Ξ.error_memory = ".cursor/memory/errors.md"
Ξ.track = log_recurring_issues_propose_fix
```

### Recurrence Detection
```
Ξ.recurrence_threshold = 2
Ξ.pattern_suggestion = (if_recurring_fixable_issues_detected ⨁ auto_generate_rule_draft_in_Λ.path ⨁ suggest_reusable_strategy)
```

## 🎯 Ξ.cleanup_phase: Code Quality Maintenance

### Drift Detection & Cleanup
```
Ξ.cleanup_phase = (detect_code_drift_dead_logic_broken_imports_incoherence ⨁ suggest_refactor_or_simplification ⨁ optionally_archive_removed_blocks_in_Ψ)
```

### Ξ.quality_issues: Tracked Issues
```
Ξ.quality_issues = {dead_logic, broken_imports, incoherence, technical_debt, performance_issues}
```

## 🎯 Ξ.track: Issue Tracking & Analysis

### Ξ.issue_types: Classification System
```
Ξ.issue_types = {recurring, systematic, environmental, architectural, procedural}
```

### Ξ.tracking_protocol: 6-Step Process
```
Ξ.tracking_protocol = (issue_detection → context_capture → pattern_analysis → root_cause → solution_tracking → effectiveness_monitoring)
```

## 🎯 Ξ Error Analysis & Resolution

### Ξ.error_memory_structure: Template
```
Ξ.error_memory_structure = {
    recurring_issues: {problem, occurrences, root_cause, resolution, prevention, status},
    pattern_analysis: {frequency, impact, proposed_solution, rule_draft_link}
}
```

### Ξ.solution_generation: Process
```
Ξ.solution_generation = (analyze_issue_context_frequency ⨁ identify_root_cause_patterns ⨁ propose_systematic_solutions ⨁ generate_preventive_Λ_rules_if_appropriate)
```

## 🎯 Ξ Integration with Learning Systems

### Ξ.auto_rule_generation: Automatic Rule Creation
```
Ξ.auto_rule_generation = (if_issue_frequency_≥_Ξ.recurrence_threshold ⨁ generate_DRAFT.mdc_in_Λ.path ⨁ include_problem_description_solution ⨁ propose_prevention_strategy)
```

### Ξ.diagnostic_hooks: Cross-System Integration
```
Σ_hooks.diagnostics = {
    on_error_detected: [Ξ.track, Λ.suggest],
    on_recurrent_error_detected: [Λ.generate_draft_rule],
    on_file_modified: [Λ.suggest, Φ.capture_if_patterned],
    on_cleanup_triggered: [Ξ.cleanup_phase, Ψ.capture_changes]
}
```

## 🎯 Ξ Quality Metrics & Monitoring

### Ξ.effectiveness: Diagnostic Metrics
```
Ξ.effectiveness = {
    issue_resolution_rate: resolved_issues / total_issues,
    prevention_success: prevented_recurrences / total_attempts,
    pattern_detection_accuracy: correct_patterns / total_patterns,
    cleanup_impact: quality_improvement_score
}
```

### Ξ.improvement_tracking: Quality Metrics
```
Ξ.improvement_tracking = {before_after_metrics, issue_reduction, prevention_effectiveness, time_to_resolution}
```

## 🎯 Ξ.cleanup Automation

### Ξ.auto_cleanup: Automated Triggers
```
Ξ.auto_cleanup = (trigger_on = [file_modification_count > threshold, error_frequency > acceptable_rate, technical_debt_accumulation > limit, manual_cleanup_request])
```

### Ξ.cleanup_operations: 5-Step Process
```
Ξ.cleanup_operations = {dead_code_removal, import_optimization, pattern_consistency, documentation_sync, test_coverage_gaps}
```

### Ξ.safety_protocol: Safety Measures
```
Ξ.safety_protocol = (archive_removed_code_in_Ψ_traces ⨁ require_confirmation_for_major_changes ⨁ maintain_rollback_capability ⨁ document_all_cleanup_decisions)
```

## 🎯 Ξ Predictive Analysis

### Ξ.trend_analysis: Predictive Framework
```
Ξ.trend_analysis = (identify_degradation_patterns ⨁ predict_likely_future_issues ⨁ suggest_preventive_measures ⨁ recommend_proactive_refactoring)
```

### Ξ.early_warning: Monitoring System
```
Ξ.early_warning = {code_complexity_growth, error_rate_trends, technical_debt_accumulation, pattern_violation_frequency}
```

---
*Ξ = diagnostics & refinement with predictive issue prevention*


