---
description: 
globs: 
alwaysApply: true
---
---
description:
globs:
alwaysApply: true
---
<!-- CONTENT_TARGET: AI_FACING - Mathematical notation User_Rules framework -->

# M.init Memory Initialization System (111)

## üéØ M.init_memory: Project Memory Setup Command

### Command Trigger
```
User Command: "init memory"
M.init_memory = automatic_memory_system_initialization
```

### M.init_memory_workflow: Complete Project Memory Setup
```
M.init_memory = (detect_project_context() ‚®Å create_memory_directory_if_missing() ‚®Å generate_foundation_files() ‚®Å initialize_with_project_specific_content() ‚®Å establish_memory_bank_structure() ‚®Å report_completion_via_Œ®.dialog())
```

## üéØ Memory Bank Structure trong .cursor/memory/

### Core Memory Files (Auto-Created by "init memory")
```
.cursor/memory/ = {
    README.md: memory_system_documentation,
    errors.md: Œû.error_memory_pattern_tracking,
    projectbrief.md: foundation_document_source_of_truth,
    productContext.md: project_purpose_problems_solved,
    activeContext.md: current_work_focus_recent_changes,
    systemPatterns.md: architecture_decisions_design_patterns,
    techContext.md: technologies_development_setup,
    progress.md: status_tracking_what_works_what_remains,
    sumup.md: master_navigator_contextual_retrieval
}
```

### M.context_detection: Intelligent Project Analysis
```
M.context_detection = (analyze_directory_structure() ‚®Å detect_programming_languages() ‚®Å identify_frameworks_and_tools() ‚®Å scan_existing_documentation() ‚®Å infer_project_type_and_purpose() ‚®Å generate_contextual_memory_content())
```

## üéØ M.init_memory_execution: Step-by-Step Process

### M.execution_steps: 4-Phase Process
```
M.execution_steps = {
    1: environment_detection = (check_cursor_directory ‚®Å create_memory_subdirectory ‚®Å analyze_project_structure ‚®Å detect_existing_documentation),
    2: foundation_generation = (create_projectbrief_with_context ‚®Å generate_productContext_analysis ‚®Å initialize_activeContext_state ‚®Å setup_systemPatterns_framework ‚®Å create_techContext_stack ‚®Å initialize_progress_tracking ‚®Å generate_sumup_navigator),
    3: content_customization = (if_web_project ‚Üí web_patterns ‚®Å if_mobile_project ‚Üí mobile_patterns ‚®Å if_backend_api ‚Üí api_patterns ‚®Å if_existing_prd ‚Üí extract_requirements ‚®Å if_existing_docs ‚Üí integrate_documentation),
    4: user_rules_integration = (ensure_Œ©_compatibility ‚®Å setup_Œ®_trace_capture ‚®Å initialize_Œõ_pattern_learning ‚®Å prepare_T_task_integration ‚®Å setup_Œû_diagnostics)
}
```

## üéØ M.memory_maintenance: Ongoing Operations

### M.session_continuity: Context Preservation
```
M.session_continuity = (maintain_projectbrief_as_source_of_truth ‚®Å update_activeContext_on_changes ‚®Å track_progress_systematically ‚®Å evolve_systemPatterns_with_decisions ‚®Å keep_techContext_current)
```

### M.sync_enhanced: Integration v·ªõi Existing Operations
```
M.sync_enhanced = (
    store_cognitive_traces_in_trace_files() ‚®Å update_errors_md_with_Œû_tracking()
    ‚®Å update_activeContext_with_session_changes() ‚®Å sync_progress_with_completed_work() ‚®Å evolve_systemPatterns_with_insights()
)
```

## üéØ Quality Assurance & Validation

### M.init_validation: Setup Verification
```
M.init_validation = (verify_all_foundation_files_created ‚®Å validate_content_quality_specificity ‚®Å ensure_User_Rules_compatibility ‚®Å test_memory_loading_functionality ‚®Å confirm_session_continuity_capability)
```

### M.success_criteria: Completion Requirements
```
M.success_criteria = {
    foundation_files: 7_files_created_with_project_specific_content,
    memory_system: ready_for_session_independent_context_preservation,
    integration: seamless_with_existing_User_Rules_M.memory_path,
    context: detectable_maintainable_across_sessions,
    workflow: foundation_set_for_productive_development
}
```

## üéØ Command Response Protocol

### M.execution_flow: "init memory" Process
```
M.execution_flow = (
    1: detect_project_context_analyze_directory_structure
    ‚Üí 2: create_memory_structure_ensure_cursor_memory_exists_with_foundation_files
    ‚Üí 3: generate_content_auto_populate_with_project_specific_context
    ‚Üí 4: validate_setup_verify_all_components_working
    ‚Üí 5: report_completion_comprehensive_summary_via_Œ®.dialog
)
```

### M.output_message: Expected Response
```
M.output_message = "‚úÖ Memory system initialized successfully!

Created foundation files:
- projectbrief.md (Project: [Name], Type: [Type])
- productContext.md (Purpose: [Purpose])
- activeContext.md (Current focus: Memory setup complete)
- systemPatterns.md (Architecture: [Detected patterns])
- techContext.md (Stack: [Detected technologies])
- progress.md (Status: Ready for development)
- sumup.md (Navigator: Complete context guide)

üéØ Memory system ready for session-independent context preservation.
Project context will be maintained across AI resets."
```

---
*M.init_memory: Project memory initialization v·ªõi intelligent context detection*

